package com.kgitbank.rest;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration({
		"file:src/main/webapp/WEB-INF/spring/root-context.xml",
		"file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml"
})
public class ControllerTest {
	
	@Autowired
	private WebApplicationContext context;
	private MockMvc mockMvc;
	
	@Before
	public void testSetup() {
		this.mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
	}
	
	@Test
	public void homeTest() throws Exception {
		
		/*
		  mockMvc : 테스트를 진행하기 위해 생선한 spring MVC
		  perform(requestBuilder) : mockMvc에 요청을 보내보는 메서드
		  RequestBuilders : 원하는 Method의 RequestBuilder를 생성하는 팩토리 클래스
		  andReturn() : perform()을 통해 실핸된 컨트롤러의 결과를 꺼낸다. 
		  				해당 컨트롤러 실행 결과에서 원하는 값들을 체크할 수 있다
		
		*/
		
		String resultPage = mockMvc.perform(MockMvcRequestBuilders.get("/normal/home")
				).andReturn().getModelAndView().getViewName();
		
		assertEquals("/home", resultPage);
	}

}

