<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<appender name="file-appender" class="org.apache.log4j.FileAppender" >
		<param name="file" value="./note/log/my_log.html"/>
		<layout class="org.apache.log4j.HTMLLayout" />
	</appender>
	
	<appender name="rack_log" class="org.apache.log4j.FileAppender" >
		<param name="file" value="./note/game/gamelog.log"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	
	
	<appender name="RollingFile" class="org.apache.log4j.RollingFileAppender" >
		<param name="MaxFileSize" value="1KB"/>
		<param name="MaxBackupIndex" value="10"/>
		<param name="Append" value="true"/>
		<param name="file" value="./note/rollingFile/Rolling.log"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n"/>
		</layout>
	</appender>
	
	<appender name="DailyRollingFile" class="org.apache.log4j.DailyRollingFileAppender" >
		<param name="Append" value="true"/>
		<param name="file" value="./note/dailyRollingFile/Rolling.log"/>
		<param name="FilenamePatten" value="yyyy-MM-dd"/>
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n"/>
		</layout>
	</appender>

	
	<!-- 
		1. PatternLayout의 서식문자 정리하기
		
		%p debug, info, warn, error, fatal 등의 priority 가 출력된다.
		%m 로그내용이 출력됩니다
		%d 로깅 이벤트가 발생한 시간을 기록합니다. 포맷은 %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS}같은 형태로 사용하며 SimpleDateFormat에 따른 포맷팅을 하면 된다
		%d{ABSOLUTE}
		%d{DATE}
		%d{ISO8601}
		%t 로그이벤트가 발생된 쓰레드의 이름을 출력합니다.
		%% % 표시를 출력하기 위해 사용한다.
		%n 플랫폼 종속적인 개행문자가 출력된다. rn 또는 n 일것이다.
		%c 카테고리를 표시합니다 예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
		%C 클래스명을 포시합니다. 예)클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력됩니다
		%F 로깅이 발생한 프로그램 파일명을 나타냅니다.
		%l 로깅이 발생한 caller의 정보를 나타냅니다
		%L 로깅이 발생한 caller의 라인수를 나타냅니다
		%M 로깅이 발생한 method 이름을 나타냅니다.
		%r 어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds)
		%x 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다.
		%X 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. %X{key} 형태.
		
		2. PatternLayout을 이용한 RollingFileAppernder 생성하고 사용해보기
		 
		 ※ RollingFileAppender
		  
		 파일 하나에 모든 로그를 기록하면 파일이 너무 커지기 때문에
		 일정 크기 이상이 되면 다음 파일로 옮겨서 저장하는 방식의 FileAppender
		
		3. PatternLayout을 이용한 DailyRollingFileAppender 생성하고 사용해보기
		
		※ RollingFileAppender
		  
		 매일 새로운 파일에 로그를 기록하는 FileAppender
		
	 -->
	
	<!-- Application Loggers -->
	<logger name="com.kgitbank.practice">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>	
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<logger name="com.kgitbank.model">
		<level value="all"></level>
		<appender-ref ref="file-appender"/>
	</logger>
	
	<logger name="com.kgitbank.service.RockTest">
		<level value="all"></level>
		<appender-ref ref="rack_log"/>
		<appender-ref ref="RollingFile"/>
		<appender-ref ref="DailyRollingFile"/>
	</logger>
	


	<!-- Root Logger : 개별 설정이 존재하지 않는 로거들이 모두 사용하는 설정 -->
	<root>
		<priority value="info" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
